
spring.application.name=customer
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/auth_db
spring.datasource.username=root
spring.datasource.password=root@01

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Server port (optional)
server.port=8080




package com.example.demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "customers")
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int custId;

    @Column(length = 50, nullable = false, unique = true)
    private String fullName;

    @Column(length = 100)
    private String address;

    @Column(length = 50, nullable = false, unique = true)
    private String email;

    @Column(length = 20, nullable = false)
    private String phoneNum;

    @Column(length = 50)
    private String city;

    @Column(length = 50)
    private String creditCardType;

    @Column(length = 30, unique = true)
    private String creditCardNum;

    @Column(length = 50, nullable = false)
    private String localDl;

    @Column(length = 50, nullable = false)
    private String ldlProvider;

    @Column(length = 50, nullable = false)
    private String internationalDl;

    @Column(length = 50, nullable = false)
    private String idlProvider;

    @Column(length = 20)
    private String zip;

    @Temporal(TemporalType.DATE)
    private Date dateOfBirth;

    @Column(length = 50, nullable = false, unique = true)
    private String passportNum;

    @Temporal(TemporalType.DATE)
    @Column(nullable = false)
    private Date passportValid;

    // Getters and Setters (no Lombok used)

    public int getCustId() {
        return custId;
    }

    public void setCustId(int custId) {
        this.custId = custId;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhoneNum() {
        return phoneNum;
    }

    public void setPhoneNum(String phoneNum) {
        this.phoneNum = phoneNum;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getCreditCardType() {
        return creditCardType;
    }

    public void setCreditCardType(String creditCardType) {
        this.creditCardType = creditCardType;
    }

    public String getCreditCardNum() {
        return creditCardNum;
    }

    public void setCreditCardNum(String creditCardNum) {
        this.creditCardNum = creditCardNum;
    }

    public String getLocalDl() {
        return localDl;
    }

    public void setLocalDl(String localDl) {
        this.localDl = localDl;
    }

    public String getLdlProvider() {
        return ldlProvider;
    }

    public void setLdlProvider(String ldlProvider) {
        this.ldlProvider = ldlProvider;
    }

    public String getInternationalDl() {
        return internationalDl;
    }

    public void setInternationalDl(String internationalDl) {
        this.internationalDl = internationalDl;
    }

    public String getIdlProvider() {
        return idlProvider;
    }

    public void setIdlProvider(String idlProvider) {
        this.idlProvider = idlProvider;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public String getPassportNum() {
        return passportNum;
    }

    public void setPassportNum(String passportNum) {
        this.passportNum = passportNum;
    }

    public Date getPassportValid() {
        return passportValid;
    }

    public void setPassportValid(Date passportValid) {
        this.passportValid = passportValid;
    }
}







package com.example.demo.repository;

import com.example.demo.model.Customer;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Integer> {
	
	 Optional<Customer> findByEmail(String email);
}





package com.example.demo.service;

import com.example.demo.model.Customer;
import java.util.List;
import java.util.Optional;

public interface CustomerService {
    Customer saveCustomer(Customer customer);
    List<Customer> getAllCustomers();
    Optional<Customer> getCustomerById(int id);
    Optional<Customer> getCustomerByEmail(String email);
}





package com.example.demo.service.impl;

import com.example.demo.model.Customer;
import com.example.demo.repository.CustomerRepository;
import com.example.demo.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CustomerServiceImpl implements CustomerService {

    private final CustomerRepository customerRepository;

    @Autowired
    public CustomerServiceImpl(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    @Override
    public Customer saveCustomer(Customer customer) {
        return customerRepository.save(customer);
    }

    @Override
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }
    
    @Override
    public Optional<Customer> getCustomerById(int id) {
        return customerRepository.findById(id);
    }

    @Override
    public Optional<Customer> getCustomerByEmail(String email) {
        return customerRepository.findByEmail(email);
    }
    
}










package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // Disable CSRF for non-browser clients like Postman
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/customers/**").permitAll() // Public access
                .anyRequest().authenticated() // Secure all other endpoints
            );
        return http.build();
    }
}






package com.example.demo.controller;

import com.example.demo.model.Customer;
import com.example.demo.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    private final CustomerService customerService;

    @Autowired
    public CustomerController(CustomerService customerService) {
        this.customerService = customerService;
    }

    // Add Customer
    @PostMapping
    public Customer addCustomer(@RequestBody Customer customer) {
        return customerService.saveCustomer(customer);
    }

    // Fetch All Customers
    @GetMapping
    public List<Customer> getAllCustomers() {
        return customerService.getAllCustomers();
    }
    
    @GetMapping("/{id}")
    public Optional<Customer> getCustomerById(@PathVariable int id) {
        return customerService.getCustomerById(id);
    }

    @GetMapping("/email")
    public Optional<Customer> getCustomerByEmail(@RequestParam String email) {
        return customerService.getCustomerByEmail(email);
    }
    
}



//{
//	  "fullName": "John Smith",
//	  "address": "123 Green Street",
//	  "email": "john.smith@example.com",
//	  "phoneNum": "9998877665",
//	  "city": "Los Angeles",
//	  "creditCardType": "VISA",
//	  "creditCardNum": "4111111111111111",
//	  "localDl": "DL5678",
//	  "ldlProvider": "RTO LA",
//	  "internationalDl": "IDL5678",
//	  "idlProvider": "Govt LA",
//	  "zip": "90001",
//	  "dateOfBirth": "1985-05-10",
//	  "passportNum": "P55667788",
//	  "passportValid": "2032-12-31"
//	}



